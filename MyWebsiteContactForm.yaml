##
 # Copyright (c) Jaime Elso de Blas (https://jaimeelso.com)
 # Follow me on twitter: @jaimeelso
 # Check out my Github: https://github.com/jaimeelso
 # This code is licensed under the MIT license.
 # Created on: 02/28/2023
 #
 # Version: 1.0
 # Description: This CloudFormation template gathers all necessary resources and their configurations to 
 # deploy a serverless backend that handles the logic behind my website's contact form.
##

AWSTemplateFormatVersion: 2010-09-09
Description: Serverless infrastructure for the backend that manages the contact form on the web jaimeelso.com

# Define the input parameters that will be used throughout the CloudFormation stack
Parameters:
  SubscriptionEndpoint:
    Type: String
    Description: The email address to which contact form messages should be sent
  RecaptchaSecretKey:
    Type: String
    Description: The secret key to call de reCaptcha API from the backend
  LambdaS3Bucket:
    Type: String
    Description: Bucket name where Lambda code is place
  LambdaS3Key:
    Type: String
    Description: Bucket key where Lambda code is place
  ApiStackName:
    Type: String
    Description: API Stack name

# This section lists all the resources that will be deployed in AWS by CloudFormation
Resources:
  # Amazon Simple Notification Service
  ContactFormTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ContactForm
      DisplayName: ContactForm

  ContactFormEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ContactFormTopic
      Protocol: email
      Endpoint: !Ref SubscriptionEndpoint

  # AWS Secrets Manager
  ContactFormSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: ContactForm
      Description: reCAPTCHA Private Key and SNS ARN
      SecretString: !Sub '{"CAPTCHA_KEY": "${RecaptchaSecretKey}", "SNS_ARN": "${ContactFormTopic}"}'

  # IAM
  ContactFormRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ContactForm
      Description: Lambda Role to perform logs, sns and secrets manager actions
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  ContactFormPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ContactForm
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ContactFormFunction}:*"
          - Effect: Allow
            Action: 
              - secretsmanager:GetSecretValue
            Resource: !Ref ContactFormSecret
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref ContactFormTopic
      Roles:
        - !Ref ContactFormRole
  
  # AWS Lambda
  ContactFormFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ContactForm
      Description: Function that manages the backend logic of the contact form
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      PackageType: Zip
      Handler: index.handler
      Role: !GetAtt ContactFormRole.Arn

  ContactFormLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ContactFormFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactFormApiId}/*/*/contactForm"
        - ContactFormApiId: 
            Fn::ImportValue: !Sub "${ApiStackName}-ApiId"

  # AWS ApiGateway
  ContactFormApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: 
        Fn::ImportValue: !Sub "${ApiStackName}-ApiId"
      RouteKey: "ANY /contactForm"
      AuthorizationType: "NONE"
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ContactFormApiIntegration

  ContactFormApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: 
        Fn::ImportValue: !Sub "${ApiStackName}-ApiId"
      Description: "Integration with Lambda function"
      IntegrationType: "AWS_PROXY"
      IntegrationMethod: ANY
      IntegrationUri: !GetAtt ContactFormFunction.Arn
      PayloadFormatVersion: "1.0"
      TimeoutInMillis: 30000
